@{ToDoContext db = new ToDoContext();}

@model CS3750P1.Models.EditListModel

@{
    ViewBag.Title = "Edit List";
}
<head>
    <style>
        /*Category*/
        /* The Modal (background) */
        .modalCat {
            display: none; /* Hidden by default */
            position: fixed; /* Stay in place */
            z-index: 1; /* Sit on top */
            padding-top: 100px; /* Location of the box */
            left: 0;
            top: 0;
            width: 100%; /* Full width */
            height: 100%; /* Full height */
            overflow: auto; /* Enable scroll if needed */
            background-color: rgb(0,0,0); /* Fallback color */
            background-color: rgba(0,0,0,0.4); /* Black w/ opacity */
        }

        /* Modal Content */
        .modal-contentCat {
            background-color: rgb(1,236,177);
            margin: auto;
            padding: 20px;
            border: 10px solid #888;
            width: 50%;
        }

        /* The Close Button */
        .closeCat {
            color: #aaaaaa;
            float: right;
            font-size: 28px;
            font-weight: bold;
        }

            .closeCat:hover,
            .closeCat:focus {
                color: #000;
                text-decoration: none;
                cursor: pointer;
            }





            /*Item*/
        /* The Modal (background) */
        .modalItem {
            display: none; /* Hidden by default */
            position: fixed; /* Stay in place */
            z-index: 1; /* Sit on top */
            padding-top: 100px; /* Location of the box */
            left: 0;
            top: 0;
            width: 100%; /* Full width */
            height: 100%; /* Full height */
            overflow: auto; /* Enable scroll if needed */
            background-color: rgb(0,0,0); /* Fallback color */
            background-color: rgba(0,0,0,0.4); /* Black w/ opacity */
        }

        /* Modal Content */
        .modal-contentItem {
            background-color: rgb(1,236,177);
            margin: auto;
            padding: 20px;
            border: 10px solid #888;
            width: 50%;
        }

        /* The Close Button */
        .closeItem {
            color: #aaaaaa;
            float: right;
            font-size: 28px;
            font-weight: bold;
        }

            .closeItem:hover,
            .closeItem:focus {
                color: #000;
                text-decoration: none;
                cursor: pointer;
            }
    </style>
</head>

<div class="container">
        

@using (Html.BeginForm("EditItems", "Home", FormMethod.Post, new { name = "frm", id = "frm" }))
{
    @Html.AntiForgeryToken()
    <div class="jumbotron">
        <div class='btn-group'>
            <h1 style="color: rgb(245,195,0)">Edit List:</h1>
            <h2>@Html.EditorFor(m => m.listName, new { htmlAttributes = new { @class = "form-control input-lg" }, onkeypress = "return event.keyCode != 13;" })</h2>
            @Html.ActionLink(linkText: "Delete This List", actionName: "DeleteListFromListView", controllerName: "Home", routeValues: new { listId = @Model.listID }, htmlAttributes: new { style = "margin-left:15em", @class = "btn btn-danger btn-xs", onclick = "return confirm('You are about to delete list \"" + Model.listName + "\". Click \"OK\" to confirm.');" })
        </div>
    </div>

    <div class="row">
        <div class="col-md-4">
            <h2 align ="center" class="text-muted">- Categories -</h2>
            <div align="center"><button align="center" type="button" id="newCatBtn" class="btn btn-success btn-xs">Create Category</button></div>
            <table class="table table-hover">
                <thead>
                    <tr>
                        <th>
                            Selected
                        </th>
                        <th>
                            Category
                        </th>
                        <th></th>
                    </tr>
                </thead>
                @for (int i = 0; i < Model.categories.Count; i++)
                {
                    <tr>
                        <td>
                            @Html.HiddenFor(m => m.categories[i].categoryName)
                            @Html.HiddenFor(m => m.categories[i].id)
                            @Html.CheckBoxFor(m => m.categories[i].Selected)
                        </td>
                        <td>
                            @Html.DisplayFor(m => m.categories[i].categoryName)
                        </td>
                        <td>
                            <button style ="margin-left: 90px" type="submit" id="Delete" name="button" class="btn btn-danger btn-xs" value=@Model.categories[i].id onclick ="DeleteCat(); if (window.event.keyCode == 13) {event.returnValue = false; event.cancel = true;}">Delete</button>
                        </td>
                    </tr>
                }

            </table>

            <!-- The Modal -->
            <div id="myModal" class="modalCat">

                <!-- Modal content -->
                <div class="modal-contentCat">
                    <span class="closeCat">&times;</span>
                    <div align="center">
                        <input class="form-control input-lg" id="myNewCat" name="newCat" type="text" placeholder="New Category Name" onkeypress="return event.keyCode != 13;">
                        <button align="center" type="submit" id="CreateCat" name="button" class="btn btn-warning btn-block" value="NewCat" onkeydown="event.preventDefault();">Create New Category</button>
                    </div>
                   
                </div>

            </div>
        </div>
        <div class="col-md-8">
            <h2 align ="center" class="text-muted">- Items -</h2>
            <div align="center"><button type="button" id="newItemBtn" class="btn btn-success btn-xs">New Task</button></div>
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>
                            Item Name
                        </th>
                        <th>
                            Status
                        </th>
                        <th></th>
                        <th></th>
                    </tr>
                </thead>
                @Html.HiddenFor(m => m.listID)
                @Html.HiddenFor(m => m.changed)
                @for (int i = 0; i < Model.items.Count; i++)
                {
                    <tr>
                        <td>
                            @Html.HiddenFor(m => m.items[i].itemID)
                            @Html.HiddenFor(m => m.items[i].dateCompleted)
                            @Html.HiddenFor(m => m.items[i].listID)
                            @Html.HiddenFor(m => m.items[i].isCompleted)
                            @Html.EditorFor(m => m.items[i].itemName, new { htmlAttributes = new { @class = "form-control" }, onkeypress = "return event.keyCode != 13;", onkeydown = "event.preventDefault();" })
                        </td>
                        @if (@Model.items[i].isCompleted == true)
                        {
                            <td class="text-success">Completed</td>
                            <td><button type="submit" id="Inomplete" name="button" class="btn btn-warning btn-xs btn-block" value=@Model.items[i].itemID onclick="IncompleteItem();">Set as Uncompleted</button></td>
                        }
                        else
                        {
                            <td class="text-warning">Uncompleted</td>
                            <td><button type="submit" id="Complete" name="button" class="btn btn-success btn-xs btn-block" value=@Model.items[i].itemID onclick="CompleteItem();">Complete</button></td>
                        }
                        <td><button type="submit" id="Delete" name="button" class="btn btn-danger btn-xs btn-block" value=@Model.items[i].itemID onkeydown="event.preventDefault();" onclick="DeleteItem();">Delete</button></td>
                    </tr>
                }

            </table>

            <div id="itemModal" class="modalItem">

                <!-- Modal content -->
                <div class="modal-contentItem">
                    <span class="closeItem">&times;</span>
                    <div align="center">
                        <input class="form-control input-lg" id="myNewItem" name="newItem" type="text" placeholder="New Task Name" onkeypress="return event.keyCode != 13;">
                        <button align="center" type="submit" id="CreateItem" name="button" class="btn btn-warning btn-block" value="NewItem" onkeydown="event.preventDefault();">Submit</button>
                    </div>                  
                </div>

            </div>

        </div>
    </div>
    <br /><br />
    <button type="submit" id="Update" name="button" value="Update" align ="center" class="btn btn-success btn-block">Save Changes</button>
}

                    
                    
</div>

<script>



    document.getElementById("myNewItem").addEventListener("keyup", function (event) {
        event.preventDefault();
        if (event.keyCode == 13) {
           document.getElementById("CreateItem").click();
        }
    });

    document.getElementById("myNewCat").addEventListener("keyup", function (event) {
        event.preventDefault();
        if (event.keyCode == 13) {
            document.getElementById("CreateCat").click();
        }
    });

    // Get the modal
    var modalCat = document.getElementById('myModal');

    // Get the button that opens the modal
    var btn = document.getElementById("newCatBtn");

    // Get the <span> element that closes the modal
    var span = document.getElementsByClassName("closeCat")[0];

    // When the user clicks the button, open the modal
    btn.onclick = function() {
        modalCat.style.display = "block";
    }

    // When the user clicks on <span> (x), close the modal
    span.onclick = function() {
        modalCat.style.display = "none";
    }

    // When the user clicks anywhere outside of the modal, close it
    window.onclick = function(event) {
        if (event.target == modalCat) {
            modalCat.style.display = "none";
        }
    }

    // Get the modal
    var modalItem = document.getElementById('itemModal');

    // Get the button that opens the modal
    var btn2 = document.getElementById("newItemBtn");

    // Get the <span> element that closes the modal
    var span = document.getElementsByClassName("closeItem")[0];

    // When the user clicks the button, open the modal
    btn2.onclick = function () {
        modalItem.style.display = "block";
    }

    // When the user clicks on <span> (x), close the modal
    span.onclick = function () {
        modalItem.style.display = "none";
    }

    // When the user clicks anywhere outside of the modal, close it
    window.onclick = function (event) {
        if (event.target == modal2) {
            modalItem.style.display = "none";
        }
    }

    function CompleteItem(){
        document.getElementById("changed").value = "CompleteItem";
    }

    function IncompleteItem() {
        document.getElementById("changed").value = "IncompleteItem";
    }

    function DeleteItem() {
        if (confirm('Are you sure you want to delete this item? \n Click \"OK\" to confirm.')) {
            document.getElementById("changed").value = "DeleteItem";
        }
        else
        {
            document.getElementById("changed").value = "";
        }
    }
    function DeleteCat() {
        if (confirm('Are you sure you want to delete this category? \n Click \"OK\" to confirm.')) {
            document.getElementById("changed").value = "DeleteCat";
        }
        else
        {
            document.getElementById("changed").value = "";
        }
    }

    document.getElementById("listName")
            .addEventListener("keydown", function (e) {
                var keyCode = e.keyCode || e.which;
                if (keyCode === 13) {
                    e.preventDefault();
                    document.getElementById("Update").click();
                }
            });

    @for(var i = 0; i < Model.items.Count(); i++)
    {
        var itemID = "items_" + @i + "__itemName";
        <text>
        document.getElementById("@itemID")
            .addEventListener("keydown", function (e) {
                var keyCode = e.keyCode || e.which;
                if (keyCode === 13) {
                    e.preventDefault();
                    document.getElementById("Update").click();
                }
            });
        </text>
    }

</script>